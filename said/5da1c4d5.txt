hazeyez asked read this code: https://raw.githubusercontent.com/apache/ofbiz/trunk/framework/base/src/main/java/org/apache/ofbiz/base/crypto/HashCrypt.java and tell me how the code works to result in either of the following hashes: `$SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I` or `$SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2IYNNAmerica/Chicago` with hash 5da1c4d5
<---- snip ---->
Algorithm PBKDF2SHA256 private static final int PBKDIterations 10000 private static final int PBKDKeyLength 256 private static final String SHA256 SHA256 private static final String SHA1 SHA1 private static final String MD5 MD5 private static final String DEFAULTENCODING UTF8 private static final String PBKDAlgorithm PBKDF2SHA256 private static final int PBKDIterations 10000 private static final int PBKDKeyLength 256 private static final String SHA256 SHA256 private static final String SHA1 SHA1 private static final String MD5 MD5 private static final String DEFAULTENCODING UTF8 public static String cryptPassword  String clearString  String saltString  String hashType  String saltString  saltString  generateSalt  hashType  PBKDAlgorithm  generatePbkdf2Hex  hashType  clearString  saltString  saltString  PBKDKeyLength  PBKDIterations  true  DEFAULTENCODING  true public static boolean checkPassword  String saltString  String hashString  String clearString  hashType  saltString  saltString  PBKDKeyLength  PBKDIterations  true  DEFAULTENCODING  false if hashString null  return false boolean result hashStringequalscryptPasswordclearString saltString hashType if result  DebuglogInfo("HashCryptcheckPassword Input clearString " clearString " saltString " saltString " hashType " hashType " result " result module) return result public static String cryptPassword  String clearString  String saltString  String hashType  String saltString  saltString  generateSalt  hashType  PBKDAlgorithm  generatePbkdf2Hex  hashType  clearString  saltString  saltString  PBKDKeyLength  PBKDIterations  true  DEFAULTENCODING  false public static boolean checkPassword  String saltString  String hashString  String clearString  hashType  saltString  saltString  PBKDKeyLength  PBKDIterations  true  DEFAULTENCODING  false if hashString null  return false boolean result hashStringequalscryptPasswordclearString saltString hashType if result  DebuglogInfo("HashCryptcheckPassword Input clearString " clearString " saltString " saltString " hashType " hashType " result " result module) return result public static String cryptPassword  String clearString  String saltString  String hashType  String saltString  saltString  generateSalt  hashType  PBKDAlgorithm  generatePbkdf2Hex  hashType  clearString  saltString  saltString  PBKDKeyLength  PBKDIterations  true  DEFAULTENCODING  false public static boolean checkPassword  String saltString  String hashString  String clearString  hashType  saltString  saltString  PBKDKeyLength  PBKDIterations  true  DEFAULTENCODING  false if hashString null  return false boolean result hashStringequalscryptPasswordclearString saltString hashType if result  DebuglogInfo("HashCryptcheckPassword Input clearString " clearString " saltString " saltString " hashType " hashType " result " result module) return result 

The code provided is a utility class for performing one-way hash encryption using SHA1, MD5, or PBKDF2 algorithms. It includes methods for generating a salt string, generating a hash string, and checking if a given password matches a stored hash. 

The first line of the code imports necessary classes for working with cryptography, such as MessageDigest, SecretKeyFactory, and Base64.

Next, the HashCrypt class is declared with a public modifier, making it accessible to other classes. The class has a public final static String variable named "module" which is set to the fully qualified name of the HashCrypt class.

The following line declares a constant variable named "CRYPTCHARSET" which contains the characters used to generate a salt string.

Next, the class declares some private constants for the supported algorithms: PBKDF2-SHA1, PBKDF2-SHA256, SHA256, SHA1, and MD5. These will be used to specify which algorithm to use for hashing.

The class also declares some private constants for the default encoding, PBKDF2 key length, and PBKDF2 iterations. These values can be changed if desired.

After the constants are declared, the class has a public static method named "crypt
